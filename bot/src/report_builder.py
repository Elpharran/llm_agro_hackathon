from __future__ import annotations

import ast
import json
import traceback
from datetime import datetime
from typing import List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    RootModel,
    ValidationError,
    field_validator,
    model_validator,
)
from src.logger_download import logger
from src.utils import (
    MistralAPIInference,
    clean_string,
    load_entities,
    load_prompt,
)

ERROR_TEXT = (
    "–í–∞—à –æ—Ç—á—ë—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω üò≠"
)
allowed_entities = load_entities()


class OperationEntry(BaseModel):
    –î–∞—Ç–∞: datetime = Field(..., description="–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    –û–ø–µ—Ä–∞—Ü–∏—è: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    –î–∞–Ω–Ω—ã–µ: str = Field(..., description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏")
    –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: Optional[str] = None
    –ö—É–ª—å—Ç—É—Ä–∞: Optional[str] = None
    –ó–∞_–¥–µ–Ω—å_–≥–∞: Optional[Union[int, str]] = Field(None, alias="–ó–∞ –¥–µ–Ω—å, –≥–∞")
    –°_–Ω–∞—á–∞–ª–∞_–æ–ø–µ—Ä–∞—Ü–∏–∏_–≥–∞: Optional[Union[int, str]] = Field(None, alias="–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞")
    –í–∞–ª_–∑–∞_–¥–µ–Ω—å_—Ü: Optional[Union[int, str]] = Field(None, alias="–í–∞–ª –∑–∞ –¥–µ–Ω—å, —Ü")
    –í–∞–ª_—Å_–Ω–∞—á–∞–ª–∞_—Ü: Optional[Union[int, str]] = Field(None, alias="–í–∞–ª —Å –Ω–∞—á–∞–ª–∞, —Ü")

    @model_validator(mode="before")
    @classmethod
    def validate_date(cls, data: dict) -> dict:
        if "–î–∞—Ç–∞" in data:
            date_str = data["–î–∞—Ç–∞"]
            try:
                parsed_date = datetime.strptime(date_str, "%d.%m.%Y")
            except ValueError:
                try:
                    parsed_date = datetime.strptime(date_str, "%Y-%m-%d")
                except ValueError:
                    raise ValueError(
                        f"Invalid date format: {date_str}. "
                        "Use either –î–î.–ú–ú.–ì–ì–ì–ì or YYYY-MM-DD"
                    )
            data["–î–∞—Ç–∞"] = parsed_date.strftime("%d.%m.%Y")
            data["–î–∞—Ç–∞"] = datetime.strptime(data["–î–∞—Ç–∞"], "%d.%m.%Y")
        return data

    @field_validator("–û–ø–µ—Ä–∞—Ü–∏—è")
    def validate_operation(cls, v):
        if v not in allowed_entities["type"]:
            raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v

    @field_validator("–ö—É–ª—å—Ç—É—Ä–∞")
    def validate_culture(cls, v):
        if v and v not in allowed_entities["culture"]:
            raise ValueError(f"–ö—É–ª—å—Ç—É—Ä–∞ '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v

    @field_validator("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
    def validate_division(cls, v):
        if v and v not in allowed_entities["division"]:
            raise ValueError(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v


class OperationList(RootModel[List[OperationEntry]]):
    pass


class ReportBuilder:
    def __init__(self, config: dict):
        self.config = config
        self.model = MistralAPIInference(
            config_path="src/configs/mistral_api.cfg.yml",
            api_key=config["mistral_api_key"],
            proxy_url=None,
        )
        self.model.set_generation_params(system_prompt=config["assistant_prompt"])

    def _correct_fields(self, field: str, data: dict) -> dict:
        logger.warning(f"üö© Correcting field {field}")
        logger.warning(data)

        if field == "–û–ø–µ—Ä–∞—Ü–∏—è":
            allowed = ", ".join(allowed_entities["type"])
        if field == "–ö—É–ª—å—Ç—É—Ä–∞":
            allowed = ", ".join(allowed_entities["culture"])
        if field == "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ":
            allowed = ", ".join(allowed_entities["division"])

        prompt = load_prompt(
            prompt_path="prompts/5. validation_fields.md",
            validation=True,
            report=str(data),
            field=field,
            allowed=allowed,
        )
        return self.model.predict(prompt)

    def _correct_json(self, data: str) -> dict:
        logger.warning("üö© Correcting JSON structure")
        logger.warning(data)
        prompt = load_prompt(
            prompt_path="prompts/5. validation_json.md",
            validation=True,
            report=data,
        )
        return self.model.predict(prompt)

    def _validate(self, report: str, field=None, initial=False) -> dict:
        try:
            cleaned = clean_string(report)
            if cleaned == "–û—Ç—á—ë—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.":
                raise ValueError("Poor quality data, nothing to extract")
            parsed = json.loads(cleaned)

            if initial:
                return OperationList.model_validate(parsed).model_dump(
                    exclude_none=True
                )
            return OperationEntry(**parsed).model_dump(exclude_none=True)

        except ValidationError:
            correction = self._correct_fields(field, parsed)
            if initial:
                return OperationList.model_validate(correction).model_dump(
                    exclude_none=True
                )
            return OperationEntry(
                **ast.literal_eval(clean_string(correction))
            ).model_dump(exclude_none=True)

        except json.decoder.JSONDecodeError:
            correction = self._correct_json(report if initial else clean_string(report))
            if initial:
                return OperationList.model_validate(
                    ast.literal_eval(clean_string(correction))
                ).model_dump(exclude_none=True)
            return OperationEntry(**correction).model_dump(exclude_none=True)

        except Exception:
            logger.error("Unexpected error:")
            logger.error(traceback.format_exc())
            raise

    def _gather_validated(
        self, prompt: str, report_data: list[dict], field=None
    ) -> list[dict]:
        validated = []
        for entry in report_data:
            raw_report = self.model.predict(prompt, str(entry))
            validated_entry = self._validate(raw_report, field=field)
            validated.append(validated_entry)
        return validated

    def _process_stage(
        self, report_data: Union[dict, str], prompt_path, field=None, initial=False
    ):
        if initial:
            prompt = load_prompt(prompt_path, definition=True)
            reports = self.model.predict(prompt, report_data)

            logger.info(reports)

            return self._validate(reports, initial=initial, field=field)
        else:
            prompt = load_prompt(prompt_path)
            return self._gather_validated(prompt, report_data, field=field)

    def build(self, report_data: str) -> list[dict]:
        processing_steps = [
            ("prompts/1. date_and_type_definition.md", "–û–ø–µ—Ä–∞—Ü–∏—è", True),
            ("prompts/2. culture_definition.md", "–ö—É–ª—å—Ç—É—Ä–∞", False),
            ("prompts/3. division_definition.md", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", False),
            ("prompts/4. calculation.md", None, False),
        ]
        result = report_data
        for prompt_path, field, initial in processing_steps:
            logger.info(f"Processing field: {field if field else '–í—ã—á–∏—Å–ª–µ–Ω–∏—è'}")
            try:
                result = self._process_stage(result, prompt_path, field, initial)
            except Exception:
                return ERROR_TEXT

        for item in result:
            item["–î–∞—Ç–∞"] = item["–î–∞—Ç–∞"].strftime("%d.%m.%Y")
            item["–ó–∞ –¥–µ–Ω—å, –≥–∞"] = item.pop("–ó–∞_–¥–µ–Ω—å_–≥–∞")
            item["–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞"] = item.pop("–°_–Ω–∞—á–∞–ª–∞_–æ–ø–µ—Ä–∞—Ü–∏–∏_–≥–∞")
            item["–í–∞–ª –∑–∞ –¥–µ–Ω—å, —Ü"] = item.pop("–í–∞–ª_–∑–∞_–¥–µ–Ω—å_—Ü")
            item["–í–∞–ª —Å –Ω–∞—á–∞–ª–∞, —Ü"] = item.pop("–í–∞–ª_—Å_–Ω–∞—á–∞–ª–∞_—Ü")

        return result
